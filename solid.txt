
SOLID


Single Responsability: Should separate things that change for different reasons.

Open/Closed: Closed for modification and open for extension.

Liskov substitution: If S is a subclass of T, then objects of type T can be replaced by objects of type S without breaking the program.

Interface Segregation: Not relying on 'things' that are not necessary.

Dependency Inversion: High level modules should not depend on low level modules, both should depend on ABSTRACTIONS.

- Design OO (low coupling and high cohesion)
- Reduce fragility
- Increase reusability
- Reduce stiffness